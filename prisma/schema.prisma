// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Student {
  id             String   @id @default(cuid())
  status         Status
  name           String
  dob            String? // ISO date
  photoUrl       String?
  guardian       Json?
  stateOfOrigin  String?
  scholarship    String?
  financialStatus String?
  subjects       Json?
  medicalIssues  Json?
  disabilities   Json?
  sanction       String?
  clubs          Json?
  grades         Json?
  cgpa           Float?
  classOfDegree  String?
  academic       AcademicRecord[]
  financials     FinancialEntry[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Staff {
  id            String  @id @default(cuid())
  status        Status
  name          String
  dob           String? // ISO date
  phone         String?
  photoUrl      String?
  stateOfOrigin String?
  disabilities  Json?
  rank          String?
  salary        Float?
  role          StaffRole
  subjects      Json?
  department    String?
  sanction      String?
  clubs         Json?
  qualification String?
  financials    FinancialEntry[]     @relation("StaffFinancialEntries")
  libraryAssets LibraryAsset[]       @relation("StaffLibraryUploads")
  questionBankItems QuestionBankItem[] @relation("StaffQuestionBankUploads")
  payrollRecords PayrollRecord[]     @relation("StaffPayrollRecords")
  memberships   SchoolMembership[]   @relation("StaffMembership")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AcademicRecord {
  id           String  @id @default(cuid())
  student      Student @relation(fields: [studentId], references: [id])
  studentId    String
  term         String
  attendance   Float?
  testScores   Json?
  assignments  Json?
  extraCredits Json?
  examScores   Json?
  grade        String?
  cgpa         Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum EntryType {
  income
  expense
}

enum FinancialCategory {
  fees
  dues
  medical
  sanctions
  grants
  donations
  trade_fare
  salaries
  benefits
  training
  utilities
  maintenance
  lab_equipment
  software_license
  learning_materials
  tax
  scholarship
  miscellaneous
}

enum PaymentStatus {
  paid
  outstanding
  waived
}

enum Status {
  active
  inactive
  suspended
  graduated
  retired
}

enum StaffRole {
  academic
  admin
}

enum LibraryResourceType {
  lecture_note
  scheme_of_work
  reading
  past_question
  media
}

enum LibraryFormat {
  pdf
  docx
  presentation
  spreadsheet
  video
  audio
  link
}

enum PayrollStatus {
  draft
  processed
  issued
  paid
}

enum MembershipRole {
  admin
  staff
}

model FinancialEntry {
  id          String            @id @default(cuid())
  type        EntryType
  category    FinancialCategory
  amount      Float
  date        String
  description String?
  student     Student?          @relation(fields: [studentId], references: [id])
  studentId   String?
  staff       Staff?            @relation("StaffFinancialEntries", fields: [staffId], references: [id])
  staffId     String?
  status      PaymentStatus?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model EventItem {
  id          String   @id @default(cuid())
  title       String
  date        String
  description String?
  audience    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LibraryAsset {
  id          String               @id @default(cuid())
  title       String
  subject     String
  description String?
  level       String?
  resourceType LibraryResourceType
  format      LibraryFormat
  fileUrl     String?
  tags        Json?
  uploader    Staff?               @relation("StaffLibraryUploads", fields: [uploaderId], references: [id])
  uploaderId  String?
  publishedAt String?
  downloads   Int                  @default(0)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model QuestionBankItem {
  id             String   @id @default(cuid())
  title          String
  subject        String
  term           String?
  gradeLevel     String?
  examType       String?
  totalMarks     Int?
  durationMinutes Int?
  scheduledDate  String?
  instructions   String?
  fileUrl        String?
  uploader       Staff?   @relation("StaffQuestionBankUploads", fields: [uploaderId], references: [id])
  uploaderId     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PayrollRecord {
  id          String         @id @default(cuid())
  staff       Staff          @relation("StaffPayrollRecords", fields: [staffId], references: [id])
  staffId     String
  month       Int
  year        Int
  grossPay    Float
  allowances  Json?
  deductions  Json?
  netPay      Float
  status      PayrollStatus
  payDate     String?
  reference   String?
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model School {
  id          String              @id @default(cuid())
  name        String
  domain      String              @unique
  memberships SchoolMembership[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model SchoolMembership {
  id         String         @id @default(cuid())
  googleUid  String         @unique
  email      String
  role       MembershipRole
  school     School         @relation(fields: [schoolId], references: [id])
  schoolId   String
  staff      Staff?         @relation("StaffMembership", fields: [staffId], references: [id])
  staffId    String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([email, schoolId])
}
